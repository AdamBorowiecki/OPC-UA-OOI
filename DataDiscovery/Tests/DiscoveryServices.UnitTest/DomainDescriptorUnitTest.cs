
using CUAOOI.DataDiscovery.DiscoveryServices.UnitTest.TestData;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Xml.Serialization;
using UAOOI.DataDiscovery.DiscoveryServices.Models;

namespace UAOOI.DataDiscovery.DiscoveryServices.UnitTest
{
  [TestClass]
  public class DomainDescriptorUnitTest
{
    [TestMethod]
    public void GetRootDomainDescriptorTest()
    {
      DomainDescriptor _rootDomainDescriptor = RootDomainDescriptorFactory.GetRootDomainDescriptor();
      Uri _resolution = _rootDomainDescriptor.ResolveUri(m_ModelUri);
      Assert.AreEqual<string>(m_ExpectedFirsRoundUrl, _resolution.ToString());
      string _fn = "RootDomainDescriptor.xml";
      FileInfo _fi = new FileInfo($@"TestData\{_fn}");
      using (Stream _outputStream = _fi.Create())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        _serializer.Serialize(_outputStream, _rootDomainDescriptor);
      }
      _fi.Refresh();
      Assert.IsTrue(_fi.Exists);
      Assert.IsTrue(_fi.Length > 0);
      DomainDescriptor _tc;
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        _tc = (DomainDescriptor)_serializer.Deserialize(_descriptionStream);
        Assert.IsNotNull(_tc);
      }
      Assert.IsTrue(_tc.Description.Contains("Starting point"));
      Assert.AreEqual<RecordType>(RecordType.DomainDescriptor, _tc.NextStepRecordType);
      Assert.AreEqual<string>("http://localhost/root.zone/#authority#/DomainDescriptor.xml", _tc.UrlPattern);
      _resolution = _tc.ResolveUri(m_ModelUri);
      Assert.AreEqual<string>(m_ExpectedFirsRoundUrl, _resolution.ToString());
    }
    [TestMethod]
    [DeploymentItem(@"TestData\", @"TestData\")]
    public void RootZoneDomainDescriptorTest()
    {
      DomainDescriptor _rootDomainDescriptor = RootDomainDescriptorFactory.GetRootDomainDescriptor();
      string _fn = @"root.zone\DomainDescriptor.xml";
      FileInfo _fi = new FileInfo($@"TestData\{_fn}");
      DomainDescriptor _tc;
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        _tc = (DomainDescriptor)_serializer.Deserialize(_descriptionStream);
        Assert.IsNotNull(_tc);
      }
      Assert.AreEqual<string>(_rootDomainDescriptor.Description, _tc.Description);
      Assert.AreEqual<RecordType>(_rootDomainDescriptor.NextStepRecordType, _tc.NextStepRecordType);
      Assert.AreEqual<String>(_rootDomainDescriptor.UrlPattern, _tc.UrlPattern);
    }
    [TestMethod]
    [DeploymentItem(@"TestData\", @"TestData\")]
    public void DomainDescriptorAutogeneratedFileTest()
    {
      FileInfo _fi = new FileInfo(@"TestData\DomainDescriptor.xml");
      Assert.IsTrue(_fi.Exists);
      DomainDescriptor _newDescription = null;
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        _newDescription = (DomainDescriptor)_serializer.Deserialize(_descriptionStream);
      }
      Assert.IsNotNull(_newDescription);
      Assert.IsFalse(string.IsNullOrEmpty(_newDescription.Description));
      Assert.IsFalse(string.IsNullOrEmpty(_newDescription.UrlPattern));
    }

    Uri m_ModelUri = new Uri(@"http://commsvr.com/UA/Examples/BoilersSet");
    string m_ExpectedFirsRoundUrl = @"http://localhost/root.zone/commsvr.com/DomainDescriptor.xml";

  }
}


